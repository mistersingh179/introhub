// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Food {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                       String         @id @default(cuid())
  accounts                 Account[]
  sessions                 Session[]
  messages                 Message[]
  contacts                 Contact[]
  profile                  Profile?
  introductionsRequested   Introduction[] @relation("RequestedIntroductions")
  introductionsFacilitated Introduction[] @relation("FacilitatedIntroductions")
  name                     String?
  email                    String?        @unique
  emailVerified            DateTime?
  image                    String?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  Filters                  Filters[]
  credits                  Int            @default(0)
  profileImageName         String?

  @@index([email])
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Introduction {
  id                    String  @id @default(cuid())
  requesterId           String
  requester             User    @relation("RequestedIntroductions", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  facilitatorId         String
  facilitator           User    @relation("FacilitatedIntroductions", fields: [facilitatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId             String
  contact               Contact @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messageForFacilitator String
  messageForContact     String
  status                String  @default("draft")
  rejectionReason       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(requesterId)
  @@index(facilitatorId)
  @@index(contactId)
  @@index(createdAt)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Contact {
  id                String         @id
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  introductions     Introduction[]
  email             String
  sentCount         Int
  receivedCount     Int
  sentReceivedRatio Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, email])
  @@index([email])
  @@index([sentCount])
  @@index([receivedCount])
  @@index([sentReceivedRatio])
}

model PersonProfile {
  id                String             @id @default(cuid())
  email             String             @unique
  personExperiences PersonExperience[]
  linkedInUrl       String?
  fullName          String?
  city              String?
  country           String?
  state             String?
  lastUpdatedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([linkedInUrl])
  @@index([city])
  @@index([state])
  @@index([email])
}

model PersonExperience {
  id                 String        @id @default(cuid())
  personProfileId    String
  personProfile      PersonProfile @relation(fields: [personProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyName        String?
  companyLinkedInUrl String
  jobTitle           String?
  jobDescription     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([personProfileId])
  @@index([jobTitle])
}

model CompanyProfile {
  id          String                   @id @default(cuid())
  categories  CompanyProfileCategory[]
  linkedInUrl String                   @unique
  website     String?
  sizeFrom    Int?
  sizeTo      Int?
  size        Int?
  industry    String?
  foundedYear Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([website])
  @@index([industry])
  @@index([linkedInUrl])
}

model CompanyProfileCategory {
  companyProfileId String
  companyProfile   CompanyProfile @relation(fields: [companyProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId       String
  category         Category       @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([companyProfileId, categoryId])
}

model Category {
  id              String                   @id @default(cuid())
  name            String                   @unique
  companyProfiles CompanyProfileCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model ReverseEmailLookupEndpoint {
  email     String   @id
  response  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CompanyProfileEndpoint {
  url       String   @id
  response  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PeopleEnrichmentEndpoint {
  email     String   @id
  response  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Message {
  id             String    @id
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threadId       String
  fromName       String?
  fromAddress    String?
  replyToName    String?
  replyToAddress String?
  toAddress      String?
  toName         String?
  deliveredTo    String?
  subject        String?
  gmailMessageId String?
  receivedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([receivedAt])
  @@index([fromAddress])
  @@index([toAddress])
  @@index([fromAddress, toAddress])
  @@index([deliveredTo, fromAddress])
}

model Post {
  id    String    @id @default(cuid())
  title String    @unique
  tags  PostTag[]
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Filters {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  searchParams String
  dailyEmail   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
